{
  "permissions": {
    "allow": [
      "Bash(python3:*)",
      "Bash(grep:*)",
      "Bash(rg:*)",
      "Bash(timeout:*)",
      "Bash(cp:*)",
      "Bash(rm:*)",
      "Bash(find:*)",
      "Bash(ls:*)",
      "Bash(awk:*)",
      "Bash(touch:*)",
      "Bash(mv:*)",
      "Bash(python -m tests:*)",
      "Bash(python -m pytest tests/test_csp_refactoring.py -v)",
      "Bash(cut:*)",
      "Bash(mkdir:*)",
      "Bash(# 分析系スクリプトを移動\nmv analyze_detailed.py analyze_gym_violations.py analyze_timetable.py gym_usage_analysis.py trace_pe_placement.py scripts/analysis/\n\n# チェック系スクリプトを移動\nmv check_*.py debug_gym_constraint.py scripts/checks/\n\n# 修正系スクリプトを移動\nmv fix_gym_sync.py scripts/fixes/\n\n# テストファイルを移動\nmv test_*.py tests/\n\n# ドキュメントを移動\nmv gym_constraint_analysis.md refactoring_plan.md docs/)",
      "Bash(ln:*)",
      "Bash(md5sum:*)",
      "Bash(diff:*)",
      "Bash(tree:*)",
      "Bash(true)",
      "Bash(chmod:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(cat:*)",
      "Bash(echo:*)",
      "Bash(USE_REFACTORED_USE_CASE=false python3 main.py generate --max-iterations 200)",
      "Bash(sed:*)",
      "Bash(pip3 install:*)",
      "Bash(git checkout:*)",
      "Bash(python:*)",
      "Bash(claude update)",
      "Bash(claude)",
      "Bash(# デバッグスクリプトを移動\nfor file in debug_*.py; do\n  if [ -f \"$file\" ]; then\n    mv \"$file\" scripts/debug/root_moved/\n  fi\ndone\n\n# 修正スクリプトを移動  \nfor file in fix_*.py; do\n  if [ -f \"$file\" ]; then\n    mv \"$file\" scripts/fixes/root_moved/\n  fi\ndone\n\n# チェックスクリプトを移動\nif [ -f \"check_parent_empty_slots.py\" ]; then\n  mv check_parent_empty_slots.py scripts/analysis/root_moved/\nfi\n\n# テストスクリプトを移動\nfor file in test_*.py; do\n  if [ -f \"$file\" ]; then\n    mv \"$file\" scripts/debug/root_moved/\n  fi\ndone\n\n# ユーティリティスクリプトを移動\nfor file in final_cleanup.py run_empty_slot_filler.py; do\n  if [ -f \"$file\" ]; then\n    mv \"$file\" scripts/utilities/root_moved/\n  fi\ndone)",
      "Bash(# analyze_で始まるファイルを移動\nfor file in analyze_*.py; do\n  if [ -f \"$file\" ]; then\n    mv \"$file\" scripts/analysis/\n  fi\ndone\n\n# ログファイルをlogsディレクトリへ移動（既に存在するはず）\nfor file in generate_log*.txt; do\n  if [ -f \"$file\" ]; then\n    mv \"$file\" logs/\n  fi\ndone\n\n# 個別のmdファイルをdocsへ移動\nfor file in jiritsu_fix_summary.md test_period_teacher_supervision_summary.md; do\n  if [ -f \"$file\" ]; then\n    mv \"$file\" docs/\n  fi\ndone)",
      "Bash(# その他の一時的なスクリプトをscripts/archiveへ移動\nmkdir -p scripts/archive/misc\n\n# 残りのPythonスクリプトを移動\nfor file in comprehensive_jiritsu_fix.py systematic_swap_optimizer.py simple_jiritsu_fix.py trace_*.py demo_*.py; do\n  if [ -f \"$file\" ]; then\n    mv \"$file\" scripts/archive/misc/\n  fi\ndone)",
      "Bash(# オリジナル版をバックアップ\nmv src/domain/services/smart_empty_slot_filler.py src/domain/services/smart_empty_slot_filler_original.backup\n\n# リファクタリング版を正式版として採用\nmv src/domain/services/smart_empty_slot_filler_refactored.py src/domain/services/smart_empty_slot_filler.py)",
      "Bash(# インポートを修正\ngrep -r \"smart_empty_slot_filler_refactored\" src/ --include=\"*.py\" | cut -d: -f1 | sort -u | while read file; do\n  sed -i.bak 's/smart_empty_slot_filler_refactored/smart_empty_slot_filler/g' \"$file\"\n  rm \"${file}.bak\"\ndone\n\ngrep -r \"SmartEmptySlotFillerRefactored\" src/ --include=\"*.py\" | cut -d: -f1 | sort -u | while read file; do\n  sed -i.bak 's/SmartEmptySlotFillerRefactored/SmartEmptySlotFiller/g' \"$file\"\n  rm \"${file}.bak\"\ndone)",
      "Bash(# アーカイブディレクトリの作成\nmkdir -p archive/2025-06-19\nmkdir -p scripts/fixes\nmkdir -p scripts/analysis\nmkdir -p scripts/utilities)",
      "Bash(# Move analysis/check scripts\nmv check_grade5_status.py check_violations.py find_empty_slots.py scripts/analysis/\n\n# Move fix/fill scripts  \nmv fill_*.py fix_*.py find_and_fill_empty.py scripts/fixes/\n\n# List what's left in root\necho \"=== Remaining Python files in root ===\"\nls -la *.py)",
      "Bash(# Check for symlinks\nls -la *.py | grep \"^l\"\n\n# Remove the symlink since the target already exists\nrm -f check_violations.py\n\n# Check if fill_empty_slots.py is also a symlink\nls -la fill_empty_slots.py 2>/dev/null || echo \"fill_empty_slots.py not found\"\n\n# List final Python files in root\necho -e \"\\n=== Final Python files in root ===\"\nls -la *.py)",
      "Bash(# Archive old versions\nmkdir -p archive/2025-06-19/constraints\nmv src/domain/constraints/daily_duplicate_constraint.py archive/2025-06-19/constraints/\nmv src/domain/constraints/exchange_class_sync_constraint.py archive/2025-06-19/constraints/\nmv src/domain/constraints/teacher_absence_constraint.py archive/2025-06-19/constraints/\nmv src/domain/constraints/teacher_conflict_constraint_refactored.py archive/2025-06-19/constraints/\n\n# Rename refactored versions to standard names\nmv src/domain/constraints/daily_duplicate_constraint_refactored.py src/domain/constraints/daily_duplicate_constraint.py\nmv src/domain/constraints/exchange_class_sync_constraint_refactored.py src/domain/constraints/exchange_class_sync_constraint.py\nmv src/domain/constraints/teacher_absence_constraint_refactored.py src/domain/constraints/teacher_absence_constraint.py\nmv src/domain/constraints/teacher_conflict_constraint_refactored_v2.py src/domain/constraints/teacher_conflict_constraint.py\n\necho \"Consolidated constraints - removed 4 duplicates\")",
      "Bash(# Archive duplicate services\nmkdir -p archive/2025-06-19/services\n\n# Consolidate CSP orchestrators - keep improved version\nmv src/domain/services/csp_orchestrator.py archive/2025-06-19/services/\nmv src/domain/services/csp_orchestrator_advanced.py archive/2025-06-19/services/\nmv src/domain/services/csp_orchestrator_improved.py src/domain/services/csp_orchestrator.py\n\n# Consolidate constraint validators - keep improved version\nmv src/domain/services/constraint_validator.py archive/2025-06-19/services/\nmv src/domain/services/constraint_validator_improved.py src/domain/services/constraint_validator.py\n\n# Check for implementation duplicates\nmv src/domain/services/implementations/constraint_validator_improved.py archive/2025-06-19/services/\nmv src/domain/services/implementations/csp_orchestrator_improved.py archive/2025-06-19/services/\n\necho \"Archived duplicate services\")",
      "Bash(pip install:*)",
      "Bash(USE_REFACTORED_USE_CASE=false python3 main.py generate)",
      "Bash(USE_REFACTORED_USE_CASE=false python3 main.py generate --no-ultrathink)",
      "Bash(USE_REFACTORED_USE_CASE=false python3 main.py generate --no-ultrathink --max-iterations 10)",
      "Bash(for file in auto_optimizer.py standard_hours_guarantee_system.py parallel_optimization_engine_old.py test_period_protector.py flexible_standard_hours_guarantee_system.py ultra_optimized_schedule_generator.py teacher_pattern_analyzer.py)",
      "Bash(do)",
      "Bash(done)",
      "Bash(for file in *.py)",
      "Bash(if grep -q \"from \\.\\.entities\\|from \\.\\.value_objects\\|from \\.\\.constraints\" \"$file\")",
      "Bash(then)",
      "Bash(fi)",
      "Bash(for file in output_backup*.csv)",
      "Bash(do [ -f \"$file\" ])",
      "Bash(USE_REFACTORED_USE_CASE=false python3 main.py generate --use-ultra-optimized)",
      "Bash(zip:*)",
      "Bash(git remote add:*)",
      "Bash(git remote remove:*)",
      "Bash(git push:*)"
    ],
    "deny": []
  }
}